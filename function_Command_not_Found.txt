command_not_found_handler() {
    # Comprobar si el comando es "music"
    if [[ "$1" == "music" ]]; then
        echo "üéµ Iniciando lofi music y visualizador (vis)..."
        local lofi_url="http://www.youtube.com/watch?v=jfKfPfyJRdk" # URL del stream de Lofi Girl (o la que prefieras)
        local mpv_pid

        # Comprobar si los comandos necesarios existen
        if ! command -v mpv &> /dev/null; then
            echo "Error: El comando 'mpv' no est√° instalado." >&2
            echo "zsh: command not found: $1 (dependencia faltante para 'music')" >&2
            return 127
        fi
        if ! command -v yt-dlp &> /dev/null; then
            echo "Error: El comando 'yt-dlp' no est√° instalado." >&2
            echo "zsh: command not found: $1 (dependencia faltante para 'music')" >&2
            return 127
        fi
        if ! command -v vis &> /dev/null; then
            echo "Error: El comando 'vis' no est√° instalado." >&2
            echo "zsh: command not found: $1 (dependencia faltante para 'music')" >&2
            return 127
        fi

        # Obtener la URL del stream de audio de YouTube
        local stream_url
        stream_url=$(yt-dlp -f bestaudio -g "$lofi_url" 2>/dev/null)

        if [[ -z "$stream_url" ]]; then
            echo "Error: No se pudo obtener la URL del stream de YouTube para la m√∫sica." >&2
            echo "       Aseg√∫rate de que yt-dlp funciona y la URL es v√°lida." >&2
            echo "zsh: command not found: $1 (fallo al obtener stream para 'music')" >&2
            return 127
        fi

        # Iniciar mpv en segundo plano solo con audio
		mpv --no-video --really-quiet --no-term-osd --term-status-msg='' "$stream_url" &
        mpv_pid=$!
		sleep 0.2
		clear
        # Asegurarse de que mpv se detenga al salir de vis o si se interrumpe el script
		trap "echo 'üõë Deteniendo mpv (PID: $mpv_pid)...'; kill $mpv_pid 2>/dev/null; clear; echo 'Terminal limpiada.'; trap - EXIT INT TERM HUP" EXIT INT TERM HUP
        # Ejecutar vis en primer plano
        vis

        # Limpiar y asegurarse de que mpv se detuvo (la trampa deber√≠a haberlo hecho)
        # kill $mpv_pid 2>/dev/null # La trampa ya se encarga de esto
        # trap - EXIT INT TERM HUP # La trampa se auto-remueve despu√©s de ejecutarse una vez si se configura dentro. O la removemos aqu√≠ si la configuramos para que no lo haga.
                                 # Para simplificar, la trampa definida arriba ya se encarga de limpiarse (o de ser reemplazada si la funci√≥n se llama de nuevo).

        echo "üéß Sesi√≥n de m√∫sica y visualizador finalizada."
        return 0

    # Si el comando NO es "music", proceder con la l√≥gica de Gemini
    else
        # Variables y l√≥gica para la consulta a Gemini
        local user_input="$*" # Captura todos los argumentos como una sola cadena
        local system_python="python3"
        local python_script_path="$HOME/.config/zsh/gemini_query.py" # ¬°Verifica esta ruta!
        local gemini_answer
        local python_exit_status

        # Comprobaci√≥n b√°sica de API Key (ya la tienes, pero la dejo por si la l√≥gica cambia)
        if [[ -z "$GEMINI_API_KEY" ]]; then
            echo "Error: GEMINI_API_KEY no configurada." >&2
            echo "zsh: command not found: $1" >&2
            return 127
        fi

        # Comprobar si el script Python existe y es ejecutable
        if [[ ! -x "$python_script_path" ]]; then
            echo "Error: Script de Python no encontrado o no ejecutable en '$python_script_path'" >&2
            echo "zsh: command not found: $1" >&2
            return 127
        fi
        # Comprobar si python3 est√° disponible
        if ! command -v $system_python &> /dev/null; then
            echo "Error: Comando '$system_python' no encontrado en el PATH." >&2
            echo "zsh: command not found: $1" >&2
            return 127
        fi

        echo "Analizando prompt con Gemini ü§î"

        # Llamar al Python del sistema con el script, pasando la entrada como argumentos.
        # Usamos "$@" para pasar los argumentos originales tal como se recibieron.
        gemini_answer=$("$system_python" "$python_script_path" "$@")
        python_exit_status=$?

        if [[ $python_exit_status -ne 0 ]]; then
            # El script Python ya deber√≠a haber impreso su error a stderr.
            # Si quieres, puedes a√±adir un mensaje gen√©rico aqu√≠ tambi√©n.
            # echo "Error: El script de Python para Gemini fall√≥ (exit status $python_exit_status)." >&2
            # Devolver 127 como antes si el script falla, o un c√≥digo de error gen√©rico
            return 1 # O 127 si quieres ser consistente con "command not found"
        else
            echo "*****************************************"
            # Usar "$@" para glow si quieres que glow procese los argumentos originales,
            # o "$gemini_answer" si es la salida formateada que quieres.
            # Dado que es la respuesta de Gemini, "$gemini_answer" es lo correcto.
            echo "$gemini_answer" | glow 
            echo "*****************************************"
            return 0 # Indicar √©xito
        fi
    fi
}
